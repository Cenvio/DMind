generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum JobStatus {
  pending
  running
  completed
  failed
}

enum TriggerType {
  manual
  webhook
  scheduled
}

enum InsightType {
  dependency
  performance
  security
  scalability
  best_practice
}

enum Severity {
  low
  medium
  high
  critical
}

enum ExportType {
  notion
  markdown
  pdf
}

enum ExportStatus {
  pending
  completed
  failed
}

enum OperationType {
  file_analysis
  documentation
  architecture
}

enum WebhookStatus {
  received
  processed
  failed
}

model users {
  id                      String              @id @default(uuid())
  email                   String              @unique
  github_username         String              @unique
  notion_access_token     String?
  github_access_token     String?
  github_token_expires_at DateTime?
  name                    String?
  avatar_url              String?
  settings                Json?
  created_at              DateTime            @default(now())
  updated_at              DateTime            @updatedAt
  is_active               Boolean             @default(true)

  repositories        repositories[]
  analysis_jobs       analysis_jobs[]
  documentation_exports documentation_exports[]
  ai_usage_logs       ai_usage_logs[]
  custom_prompts      custom_prompts[]
}

model repositories {
  id               String            @id @default(uuid())
  user_id          String
  github_repo_id   BigInt            @unique
  full_name        String
  default_branch   String?
  language         String?
  size_kb          Int?
  is_private       Boolean           @default(false)
  clone_url        String
  webhook_url      String?
  github_metadata  Json?
  last_analyzed_at DateTime?
  created_at       DateTime          @default(now())
  updated_at       DateTime          @updatedAt

  user             users             @relation(fields: [user_id], references: [id])
  analysis_jobs    analysis_jobs[]
  custom_prompts   custom_prompts[]
  webhook_logs     webhook_logs[]
}

model analysis_jobs {
  id              String              @id @default(uuid())
  repository_id   String
  user_id         String
  status          JobStatus           @default(pending)
  trigger_type    TriggerType
  commit_sha      String?
  job_config      Json?
  progress_data   Json?
  error_message   String?
  started_at      DateTime?
  completed_at    DateTime?
  created_at      DateTime            @default(now())

  repository      repositories        @relation(fields: [repository_id], references: [id])
  user            users               @relation(fields: [user_id], references: [id])
  file_analyses   file_analyses[]
  architecture_insights architecture_insights[]
  documentation_exports documentation_exports[]
  ai_usage_logs   ai_usage_logs[]
}

model file_analyses {
  id                  String      @id @default(uuid())
  analysis_job_id     String
  file_path           String
  file_type           String?
  file_size_bytes     Int?
  lines_of_code       Int?
  ai_summary          String?
  complexity_metrics  Json?
  security_issues     Json?
  performance_issues  Json?
  dependencies        Json?
  created_at          DateTime    @default(now())

  analysis_job        analysis_jobs @relation(fields: [analysis_job_id], references: [id])
}

model architecture_insights {
  id               String        @id @default(uuid())
  analysis_job_id  String
  insight_type     InsightType
  severity         Severity
  title            String
  description      String?
  recommendation   String?
  affected_files   Json?
  is_resolved      Boolean       @default(false)
  created_at       DateTime      @default(now())
  resolved_at      DateTime?

  analysis_job     analysis_jobs @relation(fields: [analysis_job_id], references: [id])
}

model documentation_exports {
  id              String        @id @default(uuid())
  analysis_job_id String
  user_id         String
  export_type     ExportType
  status          ExportStatus  @default(pending)
  notion_page_id  String?
  export_url      String?
  export_config   Json?
  created_at      DateTime      @default(now())
  exported_at     DateTime?

  analysis_job    analysis_jobs @relation(fields: [analysis_job_id], references: [id])
  user            users         @relation(fields: [user_id], references: [id])
}

model ai_usage_logs {
  id                String          @id @default(uuid())
  user_id           String
  analysis_job_id   String
  model_name        String
  prompt_tokens     Int
  completion_tokens Int
  cost_usd          Decimal         @db.Decimal(10, 4)
  operation_type    OperationType
  created_at        DateTime        @default(now())

  user              users           @relation(fields: [user_id], references: [id])
  analysis_job      analysis_jobs   @relation(fields: [analysis_job_id], references: [id])
}

model custom_prompts {
  id              String        @id @default(uuid())
  repository_id   String
  user_id         String
  name            String
  prompt_template String
  variables       Json?
  is_active       Boolean       @default(true)
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt

  repository      repositories  @relation(fields: [repository_id], references: [id])
  user            users         @relation(fields: [user_id], references: [id])
}

model webhook_logs {
  id                 String        @id @default(uuid())
  repository_id      String
  event_type         String
  github_delivery_id String
  payload            Json?
  status             WebhookStatus @default(received)
  error_message      String?
  created_at         DateTime      @default(now())

  repository         repositories  @relation(fields: [repository_id], references: [id])
}